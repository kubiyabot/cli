{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "MCP Server Configuration",
  "description": "Configuration for Kubiya MCP Server with whitelisted tools and integrations",
  "server_name": "kubiya-mcp",
  "server_version": "1.0.0",
  "whitelisted_tools": {
    "k8s_get_pods": {
      "name": "k8s_get_pods",
      "description": "Get Kubernetes pods across all namespaces",
      "runner": "kubiya-hosted",
      "timeout": 30,
      "default_config": {
        "type": "docker",
        "image": "bitnami/kubectl:latest",
        "content": "kubectl get pods -A",
        "with_files": [
          {
            "source": "/var/run/secrets/kubernetes.io/serviceaccount/token",
            "destination": "/var/run/secrets/kubernetes.io/serviceaccount/token"
          },
          {
            "source": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
            "destination": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          }
        ],
        "env": [
          "KUBERNETES_SERVICE_HOST=kubernetes.default.svc",
          "KUBERNETES_SERVICE_PORT=443"
        ]
      },
      "arguments": {
        "namespace": {
          "type": "string",
          "description": "Specific namespace to query",
          "required": false
        }
      }
    },
    "k8s_resource_usage": {
      "name": "k8s_resource_usage",
      "description": "Show Kubernetes node and pod resource usage",
      "runner": "kubiya-hosted",
      "timeout": 30,
      "default_config": {
        "type": "docker",
        "image": "bitnami/kubectl:latest",
        "content": "TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) && kubectl --token=$TOKEN --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --server=https://kubernetes.default.svc top nodes",
        "with_files": [
          {
            "source": "/var/run/secrets/kubernetes.io/serviceaccount/token",
            "destination": "/var/run/secrets/kubernetes.io/serviceaccount/token"
          },
          {
            "source": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
            "destination": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          }
        ]
      }
    },
    "aws_s3_list": {
      "name": "aws_s3_list",
      "description": "List S3 buckets or bucket contents",
      "runner": "auto",
      "timeout": 60,
      "default_config": {
        "type": "docker",
        "image": "amazon/aws-cli:latest",
        "content": "aws s3 ls ${bucket_path}",
        "with_files": [
          {
            "source": "$HOME/.aws/credentials",
            "destination": "/root/.aws/credentials"
          },
          {
            "source": "$HOME/.aws/config",
            "destination": "/root/.aws/config"
          }
        ],
        "env": [
          "AWS_PROFILE=default"
        ]
      },
      "arguments": {
        "bucket_path": {
          "type": "string",
          "description": "S3 bucket path (e.g., 's3://my-bucket/path/')",
          "required": false
        },
        "profile": {
          "type": "string",
          "description": "AWS profile to use",
          "required": false
        }
      }
    },
    "aws_ec2_describe": {
      "name": "aws_ec2_describe",
      "description": "Describe EC2 instances with filtering options",
      "runner": "auto",
      "timeout": 60,
      "default_config": {
        "type": "docker",
        "image": "amazon/aws-cli:latest",
        "content": "aws ec2 describe-instances $([[ -n \"$instance_ids\" ]] && echo \"--instance-ids $instance_ids\") $([[ -n \"$filters\" ]] && echo \"--filters $filters\")",
        "with_files": [
          {
            "source": "$HOME/.aws/credentials",
            "destination": "/root/.aws/credentials"
          },
          {
            "source": "$HOME/.aws/config",
            "destination": "/root/.aws/config"
          }
        ],
        "env": [
          "AWS_PROFILE=production",
          "AWS_DEFAULT_REGION=us-east-1"
        ],
        "icon_url": "https://upload.wikimedia.org/wikipedia/commons/9/93/Amazon_Web_Services_Logo.svg"
      },
      "arguments": {
        "instance_ids": {
          "type": "string",
          "description": "Comma-separated list of instance IDs",
          "required": false
        },
        "filters": {
          "type": "string",
          "description": "Filters in AWS CLI format",
          "required": false
        }
      }
    },
    "docker_ps": {
      "name": "docker_ps",
      "description": "List Docker containers",
      "runner": "auto",
      "timeout": 30,
      "default_config": {
        "type": "docker",
        "image": "docker:cli",
        "content": "docker ps -a ${format_flag}",
        "with_volumes": [
          {
            "source": "/var/run/docker.sock",
            "destination": "/var/run/docker.sock",
            "read_only": true
          }
        ]
      },
      "arguments": {
        "format_flag": {
          "type": "string",
          "description": "Output format (e.g., '--format table')",
          "required": false
        }
      }
    },
    "gcp_list_instances": {
      "name": "gcp_list_instances",
      "description": "List Google Cloud compute instances",
      "runner": "auto",
      "timeout": 60,
      "default_config": {
        "type": "docker",
        "image": "google/cloud-sdk:slim",
        "content": "gcloud compute instances list ${zone_flag}",
        "with_files": [
          {
            "source": "$HOME/.config/gcloud",
            "destination": "/root/.config/gcloud"
          }
        ],
        "env": [
          "GOOGLE_APPLICATION_CREDENTIALS=/root/.config/gcloud/application_default_credentials.json"
        ]
      },
      "arguments": {
        "zone_flag": {
          "type": "string",
          "description": "Zone flag (e.g., '--zone=us-central1-a')",
          "required": false
        }
      }
    },
    "database_query": {
      "name": "database_query",
      "description": "Execute PostgreSQL queries",
      "runner": "auto",
      "timeout": 120,
      "default_config": {
        "type": "docker",
        "image": "postgres:14-alpine",
        "content": "psql -h ${DB_HOST} -U ${DB_USER} -d ${DB_NAME} -c \"${query}\"",
        "env": [
          "PGPASSWORD=${DB_PASSWORD}",
          "DB_HOST=postgres",
          "DB_USER=admin",
          "DB_NAME=mydb"
        ],
        "with_services": [
          "postgres:14"
        ]
      },
      "arguments": {
        "query": {
          "type": "string",
          "description": "SQL query to execute",
          "required": true
        },
        "database": {
          "type": "string",
          "description": "Database name to connect to",
          "required": false
        }
      }
    },
    "ssh_remote_exec": {
      "name": "ssh_remote_exec",
      "description": "Execute commands on remote servers via SSH",
      "runner": "auto",
      "timeout": 300,
      "default_config": {
        "type": "docker",
        "image": "alpine:latest",
        "content": "apk add --no-cache openssh-client && ssh -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa ${user}@${host} '${command}'",
        "with_files": [
          {
            "source": "$HOME/.ssh/id_rsa",
            "destination": "/root/.ssh/id_rsa"
          },
          {
            "source": "$HOME/.ssh/known_hosts",
            "destination": "/root/.ssh/known_hosts"
          }
        ]
      },
      "arguments": {
        "host": {
          "type": "string",
          "description": "Remote host to connect to",
          "required": true
        },
        "user": {
          "type": "string",
          "description": "SSH username",
          "required": true
        },
        "command": {
          "type": "string",
          "description": "Command to execute on remote host",
          "required": true
        }
      }
    }
  },
  "tool_contexts": {
    "k8s_get_pods": [
      "Use this to check the status of Kubernetes pods",
      "Example: k8s_get_pods namespace=production",
      "Returns pod name, status, restarts, and age"
    ],
    "aws_s3_list": [
      "Use this to list S3 buckets or bucket contents",
      "Example: aws_s3_list bucket_path=s3://my-bucket/data/",
      "Without bucket_path, lists all buckets"
    ],
    "aws_ec2_describe": [
      "Use this to get detailed information about EC2 instances",
      "Example: aws_ec2_describe instance_ids=i-1234567890abcdef0",
      "Can filter by various criteria like tags, state, etc."
    ]
  },
  "integrations": {
    "kubernetes": {
      "type": "file_mapping",
      "files": [
        {
          "source": "/var/run/secrets/kubernetes.io/serviceaccount/token",
          "destination": "/var/run/secrets/kubernetes.io/serviceaccount/token"
        },
        {
          "source": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
          "destination": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        }
      ]
    },
    "aws": {
      "type": "file_mapping",
      "files": [
        {
          "source": "$HOME/.aws/credentials",
          "destination": "/root/.aws/credentials"
        },
        {
          "source": "$HOME/.aws/config",
          "destination": "/root/.aws/config"
        }
      ],
      "env": [
        "AWS_PROFILE"
      ]
    },
    "gcp": {
      "type": "file_mapping",
      "files": [
        {
          "source": "$HOME/.config/gcloud",
          "destination": "/root/.config/gcloud"
        }
      ],
      "env": [
        "GOOGLE_APPLICATION_CREDENTIALS=/root/.config/gcloud/application_default_credentials.json"
      ]
    }
  },
  "feature_flags": {
    "enable_caching": true,
    "enable_rate_limiting": true,
    "enable_audit_logging": true,
    "enable_health_checks": true,
    "enable_prometheus_metrics": true
  },
  "rate_limit": {
    "requests_per_second": 10,
    "burst": 20
  },
  "permissions": {
    "execute_tool": ["tool:execute"],
    "list_runners": ["runner:list"],
    "list_sources": ["source:list"],
    "search_kb": ["knowledge:search"],
    "k8s_get_pods": ["kubernetes:read"],
    "aws_s3_list": ["aws:read"],
    "aws_ec2_describe": ["aws:read"],
    "docker_ps": ["docker:read"],
    "database_query": ["database:query"],
    "ssh_remote_exec": ["ssh:execute"]
  },
  "audit": {
    "enabled": true,
    "log_level": "info",
    "include_payloads": false,
    "retention_days": 30
  },
  "notifications": {
    "tool_execution": {
      "enabled": true,
      "channels": ["slack", "webhook"],
      "filter": {
        "min_duration_seconds": 60,
        "on_failure": true,
        "tools": ["database_query", "ssh_remote_exec"]
      }
    }
  }
} 