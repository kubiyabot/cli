/*
Kubiya API

API documentation for Kubiya

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubiya

import (
	"encoding/json"
)

// checks if the SecretRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretRequest{}

// SecretRequest struct for SecretRequest
type SecretRequest struct {
	Secrets []SecretType `json:"secrets,omitempty"`
}

// NewSecretRequest instantiates a new SecretRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretRequest() *SecretRequest {
	this := SecretRequest{}
	return &this
}

// NewSecretRequestWithDefaults instantiates a new SecretRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretRequestWithDefaults() *SecretRequest {
	this := SecretRequest{}
	return &this
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *SecretRequest) GetSecrets() []SecretType {
	if o == nil || IsNil(o.Secrets) {
		var ret []SecretType
		return ret
	}
	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretRequest) GetSecretsOk() ([]SecretType, bool) {
	if o == nil || IsNil(o.Secrets) {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *SecretRequest) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given []SecretType and assigns it to the Secrets field.
func (o *SecretRequest) SetSecrets(v []SecretType) {
	o.Secrets = v
}

func (o SecretRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Secrets) {
		toSerialize["secrets"] = o.Secrets
	}
	return toSerialize, nil
}

type NullableSecretRequest struct {
	value *SecretRequest
	isSet bool
}

func (v NullableSecretRequest) Get() *SecretRequest {
	return v.value
}

func (v *NullableSecretRequest) Set(val *SecretRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretRequest(val *SecretRequest) *NullableSecretRequest {
	return &NullableSecretRequest{value: val, isSet: true}
}

func (v NullableSecretRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


