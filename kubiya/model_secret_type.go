/*
Kubiya API

API documentation for Kubiya

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubiya

import (
	"encoding/json"
)

// checks if the SecretType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretType{}

// SecretType struct for SecretType
type SecretType struct {
	Base64 *bool `json:"base_64,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	TraceId *string `json:"trace_id,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewSecretType instantiates a new SecretType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretType() *SecretType {
	this := SecretType{}
	return &this
}

// NewSecretTypeWithDefaults instantiates a new SecretType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretTypeWithDefaults() *SecretType {
	this := SecretType{}
	return &this
}

// GetBase64 returns the Base64 field value if set, zero value otherwise.
func (o *SecretType) GetBase64() bool {
	if o == nil || IsNil(o.Base64) {
		var ret bool
		return ret
	}
	return *o.Base64
}

// GetBase64Ok returns a tuple with the Base64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretType) GetBase64Ok() (*bool, bool) {
	if o == nil || IsNil(o.Base64) {
		return nil, false
	}
	return o.Base64, true
}

// HasBase64 returns a boolean if a field has been set.
func (o *SecretType) HasBase64() bool {
	if o != nil && !IsNil(o.Base64) {
		return true
	}

	return false
}

// SetBase64 gets a reference to the given bool and assigns it to the Base64 field.
func (o *SecretType) SetBase64(v bool) {
	o.Base64 = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SecretType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SecretType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SecretType) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SecretType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SecretType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SecretType) SetName(v string) {
	o.Name = &v
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *SecretType) GetTraceId() string {
	if o == nil || IsNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretType) GetTraceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TraceId) {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *SecretType) HasTraceId() bool {
	if o != nil && !IsNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *SecretType) SetTraceId(v string) {
	o.TraceId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SecretType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SecretType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SecretType) SetValue(v string) {
	o.Value = &v
}

func (o SecretType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Base64) {
		toSerialize["base_64"] = o.Base64
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TraceId) {
		toSerialize["trace_id"] = o.TraceId
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSecretType struct {
	value *SecretType
	isSet bool
}

func (v NullableSecretType) Get() *SecretType {
	return v.value
}

func (v *NullableSecretType) Set(val *SecretType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretType(val *SecretType) *NullableSecretType {
	return &NullableSecretType{value: val, isSet: true}
}

func (v NullableSecretType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


