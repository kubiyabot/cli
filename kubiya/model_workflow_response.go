/*
Kubiya API

API documentation for Kubiya

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kubiya

import (
	"encoding/json"
)

// checks if the WorkflowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowResponse{}

// WorkflowResponse struct for WorkflowResponse
type WorkflowResponse struct {
	Error *string `json:"error,omitempty"`
	Result map[string]interface{} `json:"result,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewWorkflowResponse instantiates a new WorkflowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowResponse() *WorkflowResponse {
	this := WorkflowResponse{}
	return &this
}

// NewWorkflowResponseWithDefaults instantiates a new WorkflowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowResponseWithDefaults() *WorkflowResponse {
	this := WorkflowResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *WorkflowResponse) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowResponse) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *WorkflowResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *WorkflowResponse) SetError(v string) {
	o.Error = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *WorkflowResponse) GetResult() map[string]interface{} {
	if o == nil || IsNil(o.Result) {
		var ret map[string]interface{}
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowResponse) GetResultOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return map[string]interface{}{}, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *WorkflowResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given map[string]interface{} and assigns it to the Result field.
func (o *WorkflowResponse) SetResult(v map[string]interface{}) {
	o.Result = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkflowResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkflowResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WorkflowResponse) SetStatus(v string) {
	o.Status = &v
}

func (o WorkflowResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableWorkflowResponse struct {
	value *WorkflowResponse
	isSet bool
}

func (v NullableWorkflowResponse) Get() *WorkflowResponse {
	return v.value
}

func (v *NullableWorkflowResponse) Set(val *WorkflowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowResponse(val *WorkflowResponse) *NullableWorkflowResponse {
	return &NullableWorkflowResponse{value: val, isSet: true}
}

func (v NullableWorkflowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


