name: Release CLI

on:
  push:
    branches-ignore:
      - main
      - stable
    tags:
      - 'v**'
  workflow_dispatch:
    inputs:
      snapshot:
        description: 'Create a snapshot release'
        required: true
        type: boolean
        default: true
      version:
        description: 'Version to release (e.g., v1.0.5)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Get previous tag
        id: get_previous_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          else
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          fi
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: >-
            --clean
            ${{ github.event_name == 'workflow_dispatch' && inputs.snapshot == 'true' && '--snapshot' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' && inputs.version || github.ref_name }}
          GORELEASER_PREVIOUS_TAG: ${{ steps.get_previous_tag.outputs.previous_tag }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Rename .deb to match APT expectations
        run: |
          version="${{ github.ref_name }}" # or extract with git tag
          version="${version#v}"           # remove "v" prefix
          mv dist/*_linux_amd64.deb "dist/kubiya-cli_${version}_amd64.deb"
        
      - name: Setup APT repository
        run: |
          version="${{ github.ref_name }}" # or extract with git tag
          version="${version#v}"           # remove "v" prefix
          mkdir -p apt-repo/apt/dists/stable/main/binary-amd64
          mkdir -p apt-repo/apt/pool/main

          # # Copy .deb files to pool
          # cp dist/*.deb apt-repo/apt/pool/main/
          cp dist/kubiya-cli_${version}_amd64.deb apt-repo/apt/pool/main/


          echo "=== Tree ==="
          tree 

          # Verify .deb file(s) are present and inspect
          echo "=== Copied .deb files ==="
          ls -lh apt-repo/apt/pool/main/
          for deb in dist/*.deb; do
            echo "Inspecting $deb"
            dpkg-deb -I "$deb" | grep -E '^ Package|^ Version|^ Architecture'
          done

          # Generate Packages and compress it
          cd apt-repo/apt
          dpkg-scanpackages pool/main /dev/null > dists/stable/main/binary-amd64/Packages
          gzip -9 -f dists/stable/main/binary-amd64/Packages

      - name: Generate Release file with hashes
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev gnupg

          cd apt-repo/apt

          # Create apt-ftparchive config
          cat > config.txt <<EOF
          Dir {
            ArchiveDir ".";
          };

          Default {
            Packages::Compress ". gzip";
            Contents::Compress ". gzip";
          };

          TreeDefault {
            BinCacheDB "packages.db";
            Directory "pool";
            Packages "dists/stable/main/binary-amd64/Packages";
            Components "main";
            Architectures "amd64";
          };

          APT::FTPArchive::Release {
            Origin "Kubiya";
            Label "Kubiya APT Repository";
            Suite "stable";
            Version "${{ github.ref_name }}";
            Codename "stable";
            Architectures "amd64";
            Components "main";
            Description "APT repository for Kubiya CLI";
            Date "$(date -Ru)"
          };
          EOF

          # Set env var to avoid locale issues with date formatting
          export LC_ALL=C

          # Generate the Release file with proper config and timestamp
          apt-ftparchive -c config.txt release dists/stable > dists/stable/Release

      - name: Sign Release file
        run: |
          cd apt-repo/apt/dists/stable
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --clearsign -o InRelease Release
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 -abs -o Release.gpg Release

      - name: Export GPG key
        run: |
          mkdir -p apt-repo/apt
          gpg --export --armor > apt-repo/apt/apt-key.gpg

      - name: Create index.html
        run: |
          cat > apt-repo/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Kubiya CLI APT Repository</title>
          </head>
          <body>
            <h1>Kubiya CLI APT Repository</h1>
            <p>This is the APT repository for the Kubiya CLI package.</p>
            <h2>Installation Instructions</h2>
            <pre>
              # Add Kubiya's APT repository
              curl -fsSL https://kubiyabot.github.io/cli/apt/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/kubiya-archive-keyring.gpg
              echo "deb [signed-by=/usr/share/keyrings/kubiya-archive-keyring.gpg] https://kubiyabot.github.io/cli/apt stable main" | sudo tee /etc/apt/sources.list.d/kubiya.list

              # Update package list and install Kubiya CLI
              sudo apt update
              sudo apt install kubiya-cli
            </pre>
          </body>
          </html>
          EOF

      - name: Add .nojekyll
        run: touch apt-repo/.nojekyll

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apt-repo
          publish_branch: gh-pages
          force_orphan: true